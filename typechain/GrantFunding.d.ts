/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GrantFundingInterface extends ethers.utils.Interface {
  functions: {
    "claimGrant(address)": FunctionFragment;
    "createNewGrant(address,uint256,address,uint256)": FunctionFragment;
    "removeGrant(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimGrant", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createNewGrant",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeGrant", values: [string]): string;

  decodeFunctionResult(functionFragment: "claimGrant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createNewGrant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGrant",
    data: BytesLike
  ): Result;

  events: {
    "GrantClaimed(address,address,uint256)": EventFragment;
    "GrantRemoved(address)": EventFragment;
    "GrantUnlockAltered(address,uint256,uint256)": EventFragment;
    "NewGrantCreated(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GrantClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GrantUnlockAltered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGrantCreated"): EventFragment;
}

export class GrantFunding extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GrantFundingInterface;

  functions: {
    claimGrant(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimGrant(address)"(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNewGrant(
      token: string,
      amountOfERC20Tokens: BigNumberish,
      recipient: string,
      unlockAtTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createNewGrant(address,uint256,address,uint256)"(
      token: string,
      amountOfERC20Tokens: BigNumberish,
      recipient: string,
      unlockAtTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeGrant(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeGrant(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimGrant(
    funder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimGrant(address)"(
    funder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNewGrant(
    token: string,
    amountOfERC20Tokens: BigNumberish,
    recipient: string,
    unlockAtTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createNewGrant(address,uint256,address,uint256)"(
    token: string,
    amountOfERC20Tokens: BigNumberish,
    recipient: string,
    unlockAtTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeGrant(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeGrant(address)"(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimGrant(funder: string, overrides?: CallOverrides): Promise<void>;

    "claimGrant(address)"(
      funder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createNewGrant(
      token: string,
      amountOfERC20Tokens: BigNumberish,
      recipient: string,
      unlockAtTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createNewGrant(address,uint256,address,uint256)"(
      token: string,
      amountOfERC20Tokens: BigNumberish,
      recipient: string,
      unlockAtTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGrant(recipient: string, overrides?: CallOverrides): Promise<void>;

    "removeGrant(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    GrantClaimed(
      funder: null,
      token: null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { funder: string; token: string; amount: BigNumber }
    >;

    GrantRemoved(
      recipient: null
    ): TypedEventFilter<[string], { recipient: string }>;

    GrantUnlockAltered(
      recipient: null,
      originalTime: null,
      newTime: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { recipient: string; originalTime: BigNumber; newTime: BigNumber }
    >;

    NewGrantCreated(
      token: null,
      recipient: null,
      amount: null,
      unlockAtTime: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        token: string;
        recipient: string;
        amount: BigNumber;
        unlockAtTime: BigNumber;
      }
    >;
  };

  estimateGas: {
    claimGrant(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimGrant(address)"(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNewGrant(
      token: string,
      amountOfERC20Tokens: BigNumberish,
      recipient: string,
      unlockAtTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createNewGrant(address,uint256,address,uint256)"(
      token: string,
      amountOfERC20Tokens: BigNumberish,
      recipient: string,
      unlockAtTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeGrant(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeGrant(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimGrant(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimGrant(address)"(
      funder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNewGrant(
      token: string,
      amountOfERC20Tokens: BigNumberish,
      recipient: string,
      unlockAtTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createNewGrant(address,uint256,address,uint256)"(
      token: string,
      amountOfERC20Tokens: BigNumberish,
      recipient: string,
      unlockAtTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeGrant(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeGrant(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
